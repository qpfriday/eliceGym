{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n// 문자열+숫자로 이루어진 랜덤 5글자 반환\nexport const randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\n\n// 이메일 형식인지 확인 (true 혹은 false 반환)\nexport const validateEmail = email => {\n  return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\n\n// 주소창의 url로부터 params를 얻어 객체로 만듦\nexport const getUrlParams = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const result = {};\n  for (const [key, value] of urlParams) {\n    result[key] = value;\n  }\n  return result;\n};\n\n// 숫자에 쉼표를 추가함. (10000 -> 10,000)\nexport const addCommas = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// 로그인 여부(토큰 존재 여부) 확인\nexport const checkLogin = () => {\n  const token = sessionStorage.getItem(\"token\");\n  if (!token) {\n    // 현재 페이지의 url 주소 추출하기\n    const pathname = window.location.pathname;\n    const search = window.location.search;\n\n    // 로그인 후 다시 지금 페이지로 자동으로 돌아가도록 하기 위한 준비작업임.\n    window.location.replace(`/login?previouspage=${pathname + search}`);\n  }\n};\n\n// 관리자 여부 확인\nexport const checkAdmin = async () => {\n  // 우선 화면을 가리고 시작함 -> 화면 번쩍거림으로 인해 일단 미적용\n  //window.document.body.style.display = 'none';\n\n  const token = sessionStorage.getItem(\"token\");\n\n  // 우선 토큰 존재 여부 확인\n  if (!token) {\n    // 현재 페이지의 url 주소 추출하기\n    const pathname = window.location.pathname;\n    const search = window.location.search;\n\n    // 로그인 후 다시 지금 페이지로 자동으로 돌아가도록 하기 위한 준비작업임.\n    window.location.replace(`/login?previouspage=${pathname + search}`);\n  }\n\n  // 관리자 토큰 여부 확인\n  const res = await fetch(\"/users/admin-check\", {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const {\n    result\n  } = await res.json();\n  if (result === \"success\") {\n    window.document.body.style.display = \"block\";\n    return;\n  } else {\n    alert(\"관리자 전용 페이지입니다.\");\n    window.location.replace(\"/\");\n  }\n};\n\n// 로그인 상태일 때에는 접근 불가한 페이지로 만듦. (회원가입 페이지 등)\nexport const blockIfLogin = () => {\n  const token = sessionStorage.getItem(\"token\");\n  if (token) {\n    alert(\"로그인 상태에서는 접근할 수 없는 페이지입니다.\");\n    window.location.replace(\"/\");\n  }\n};\n\n// 해당 주소로 이동하는 콜백함수를 반환함.\n// 이벤트 핸들 함수로 쓰면 유용함\nexport const navigate = pathname => {\n  return function () {\n    window.location.href = pathname;\n  };\n};\n\n// 13,000원, 2개 등의 문자열에서 쉼표, 글자 등 제외 후 숫자만 뺴냄\n// 예시: 13,000원 -> 13000, 20,000개 -> 20000\nexport const convertToNumber = string => {\n  return parseInt(string.replace(/(,|개|원)/g, \"\"));\n};\n\n// ms만큼 기다리게 함.\nexport const wait = ms => {\n  return new Promise(r => setTimeout(r, ms));\n};\n\n// 긴 문자열에서 뒷부분을 ..으로 바꿈\nexport const compressString = string => {\n  if (string.length > 10) {\n    return string.substring(0, 9) + \"..\";\n  }\n  return string;\n};\n\n// 주소에 특정 params가 없다면 잘못된 접근으로 하고 싶은 경우 사용.\nexport const checkUrlParams = key => {\n  const {\n    [key]: params\n  } = getUrlParams();\n  if (!params) {\n    window.location.replace(\"/page-not-found\");\n  }\n};\n\n// 배열 혹은 객체에서 랜덤으로 1개 고름\nexport const randomPick = items => {\n  const isArray = Array.isArray(items);\n\n  // 배열인 경우\n  if (isArray) {\n    const randomIndex = [Math.floor(Math.random() * items.length)];\n    return items[randomIndex];\n  }\n\n  // 객체인 경우\n  const keys = Object.keys(items);\n  const randomIndex = [Math.floor(Math.random() * keys.length)];\n  const randomKey = keys[randomIndex];\n  return items[randomKey];\n};\n\n// 주변 다른 파일 것도 여기서 일괄 export 함\nexport { createNavbar } from \"./navbar.js\";","map":{"version":3,"names":["randomId","Math","random","toString","substring","validateEmail","email","String","toLowerCase","match","getUrlParams","queryString","window","location","search","urlParams","URLSearchParams","result","key","value","addCommas","n","replace","checkLogin","token","sessionStorage","getItem","pathname","checkAdmin","res","fetch","headers","Authorization","json","document","body","style","display","alert","blockIfLogin","navigate","href","convertToNumber","string","parseInt","wait","ms","Promise","r","setTimeout","compressString","length","checkUrlParams","params","randomPick","items","isArray","Array","randomIndex","floor","keys","Object","randomKey","createNavbar"],"sources":["C:/Users/modev/Desktop/chan/gallery/frontend/src/scripts/useful-functions.js"],"sourcesContent":["// 문자열+숫자로 이루어진 랜덤 5글자 반환\nexport const randomId = () => {\n  return Math.random().toString(36).substring(2, 7);\n};\n\n// 이메일 형식인지 확인 (true 혹은 false 반환)\nexport const validateEmail = (email) => {\n  return String(email)\n    .toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n};\n\n// 주소창의 url로부터 params를 얻어 객체로 만듦\nexport const getUrlParams = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n\n  const result = {};\n\n  for (const [key, value] of urlParams) {\n    result[key] = value;\n  }\n\n  return result;\n};\n\n// 숫자에 쉼표를 추가함. (10000 -> 10,000)\nexport const addCommas = (n) => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// 로그인 여부(토큰 존재 여부) 확인\nexport const checkLogin = () => {\n  const token = sessionStorage.getItem(\"token\");\n  if (!token) {\n    // 현재 페이지의 url 주소 추출하기\n    const pathname = window.location.pathname;\n    const search = window.location.search;\n\n    // 로그인 후 다시 지금 페이지로 자동으로 돌아가도록 하기 위한 준비작업임.\n    window.location.replace(`/login?previouspage=${pathname + search}`);\n  }\n};\n\n// 관리자 여부 확인\nexport const checkAdmin = async () => {\n  // 우선 화면을 가리고 시작함 -> 화면 번쩍거림으로 인해 일단 미적용\n  //window.document.body.style.display = 'none';\n\n  const token = sessionStorage.getItem(\"token\");\n\n  // 우선 토큰 존재 여부 확인\n  if (!token) {\n    // 현재 페이지의 url 주소 추출하기\n    const pathname = window.location.pathname;\n    const search = window.location.search;\n\n    // 로그인 후 다시 지금 페이지로 자동으로 돌아가도록 하기 위한 준비작업임.\n    window.location.replace(`/login?previouspage=${pathname + search}`);\n  }\n\n  // 관리자 토큰 여부 확인\n  const res = await fetch(\"/users/admin-check\", {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n\n  const { result } = await res.json();\n\n  if (result === \"success\") {\n    window.document.body.style.display = \"block\";\n\n    return;\n  } else {\n    alert(\"관리자 전용 페이지입니다.\");\n\n    window.location.replace(\"/\");\n  }\n};\n\n// 로그인 상태일 때에는 접근 불가한 페이지로 만듦. (회원가입 페이지 등)\nexport const blockIfLogin = () => {\n  const token = sessionStorage.getItem(\"token\");\n\n  if (token) {\n    alert(\"로그인 상태에서는 접근할 수 없는 페이지입니다.\");\n    window.location.replace(\"/\");\n  }\n};\n\n// 해당 주소로 이동하는 콜백함수를 반환함.\n// 이벤트 핸들 함수로 쓰면 유용함\nexport const navigate = (pathname) => {\n  return function () {\n    window.location.href = pathname;\n  };\n};\n\n// 13,000원, 2개 등의 문자열에서 쉼표, 글자 등 제외 후 숫자만 뺴냄\n// 예시: 13,000원 -> 13000, 20,000개 -> 20000\nexport const convertToNumber = (string) => {\n  return parseInt(string.replace(/(,|개|원)/g, \"\"));\n};\n\n// ms만큼 기다리게 함.\nexport const wait = (ms) => {\n  return new Promise((r) => setTimeout(r, ms));\n};\n\n// 긴 문자열에서 뒷부분을 ..으로 바꿈\nexport const compressString = (string) => {\n  if (string.length > 10) {\n    return string.substring(0, 9) + \"..\";\n  }\n  return string;\n};\n\n// 주소에 특정 params가 없다면 잘못된 접근으로 하고 싶은 경우 사용.\nexport const checkUrlParams = (key) => {\n  const { [key]: params } = getUrlParams();\n\n  if (!params) {\n    window.location.replace(\"/page-not-found\");\n  }\n};\n\n// 배열 혹은 객체에서 랜덤으로 1개 고름\nexport const randomPick = (items) => {\n  const isArray = Array.isArray(items);\n\n  // 배열인 경우\n  if (isArray) {\n    const randomIndex = [Math.floor(Math.random() * items.length)];\n\n    return items[randomIndex];\n  }\n\n  // 객체인 경우\n  const keys = Object.keys(items);\n  const randomIndex = [Math.floor(Math.random() * keys.length)];\n  const randomKey = keys[randomIndex];\n\n  return items[randomKey];\n};\n\n// 주변 다른 파일 것도 여기서 일괄 export 함\nexport { createNavbar } from \"./navbar.js\";\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}